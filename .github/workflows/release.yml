name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.tag || github.ref }}

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'

    - name: Get version information
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

    - name: Validate and verify tag
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Verify tag exists
        if ! git tag | grep -q "^${VERSION}$"; then
          echo "‚ùå Tag ${VERSION} does not exist"
          exit 1
        fi
        
        # Validate tag format
        if [[ ! "${VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
          echo "‚ùå Invalid tag format: ${VERSION}"
          echo "Expected format: v<major>.<minor>.<patch>[-<prerelease>]"
          echo "Examples: v1.0.0, v1.2.3-beta.1, v2.0.0-rc.1"
          exit 1
        fi
        
        # Extract and validate version components
        VERSION_NUMBER="${VERSION#v}"
        MAJOR=$(echo "${VERSION_NUMBER}" | cut -d. -f1)
        MINOR=$(echo "${VERSION_NUMBER}" | cut -d. -f2)
        PATCH=$(echo "${VERSION_NUMBER}" | cut -d. -f3 | cut -d- -f1)
        
        # Validate numeric components
        if [[ ! "${MAJOR}" =~ ^[0-9]+$ ]] || [[ ! "${MINOR}" =~ ^[0-9]+$ ]] || [[ ! "${PATCH}" =~ ^[0-9]+$ ]]; then
          echo "‚ùå Invalid version numbers: ${MAJOR}.${MINOR}.${PATCH}"
          exit 1
        fi
        
        # Check for pre-release
        if [[ "${VERSION}" =~ -(.+)$ ]]; then
          PRERELEASE="${BASH_REMATCH[1]}"
          echo "‚úÖ Pre-release detected: ${PRERELEASE}"
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Stable release detected"
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "‚úÖ Tag validation passed: ${VERSION}"

    - name: Run tests
      run: go test -v ./...

    - name: Build cross-platform binaries
      run: |
        export VERSION="${{ steps.version.outputs.version }}"
        export COMMIT_HASH="${{ steps.version.outputs.commit_hash }}"
        export BUILD_DATE="${{ steps.version.outputs.build_date }}"
        ./scripts/build.sh full

    - name: Generate enhanced security artifacts
      run: |
        cd dist
        
        # Generate additional checksums for enhanced security
        if command -v sha512sum >/dev/null 2>&1; then
          sha512sum *.tar.gz *.zip > SHA512SUMS 2>/dev/null || true
          echo "‚úÖ SHA512 checksums generated"
        fi
        
        # Generate file manifest with metadata
        echo "# Release Assets Manifest" > MANIFEST.txt
        echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> MANIFEST.txt
        echo "Version: ${{ steps.version.outputs.version }}" >> MANIFEST.txt
        echo "Commit: ${{ steps.version.outputs.commit_hash }}" >> MANIFEST.txt
        echo "" >> MANIFEST.txt
        echo "Files:" >> MANIFEST.txt
        ls -la *.tar.gz *.zip | awk '{printf "%-8s %s\n", $5, $9}' >> MANIFEST.txt
        echo "‚úÖ Manifest generated"
        
        cd ..

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Get previous tag for changelog
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${VERSION}" | head -n1 || echo "")
        
        # Generate comprehensive release notes
        cat > release_notes.md << 'EOF'
        ## üöÄ What's New
        
        EOF
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "**Full Changelog**: [\`${PREVIOUS_TAG}...${VERSION}\`](https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION})" >> release_notes.md
          echo "" >> release_notes.md
          
          # Categorize commits
          echo "### ‚ú® Features" >> release_notes.md
          git log --pretty=format:"- %s (%h)" --reverse "$PREVIOUS_TAG..$VERSION" --grep="feat" --grep="feature" >> release_notes.md || echo "*No new features in this release*" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### üêõ Bug Fixes" >> release_notes.md  
          git log --pretty=format:"- %s (%h)" --reverse "$PREVIOUS_TAG..$VERSION" --grep="fix" --grep="bug" >> release_notes.md || echo "*No bug fixes in this release*" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### üìö Documentation" >> release_notes.md
          git log --pretty=format:"- %s (%h)" --reverse "$PREVIOUS_TAG..$VERSION" --grep="docs" --grep="doc" >> release_notes.md || echo "*No documentation changes in this release*" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### üîß Other Changes" >> release_notes.md
          git log --pretty=format:"- %s (%h)" --reverse "$PREVIOUS_TAG..$VERSION" --invert-grep --grep="feat" --grep="fix" --grep="docs" >> release_notes.md || echo "*No other changes in this release*" >> release_notes.md
          echo "" >> release_notes.md
        else
          echo "üéâ **Initial release** of reviewtask!" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is the first stable release featuring:" >> release_notes.md
          echo "- AI-powered PR review task generation" >> release_notes.md  
          echo "- Smart review caching system" >> release_notes.md
          echo "- Cross-platform binary distribution" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Download Binary" >> release_notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md
        echo "" >> release_notes.md
        echo "### Install with Go" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "go install github.com/biwakonbu/reviewtask@${{ steps.version.outputs.version }}" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### Build from Source" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "git clone https://github.com/biwakonbu/reviewtask.git" >> release_notes.md
        echo "cd reviewtask" >> release_notes.md
        echo "git checkout ${{ steps.version.outputs.version }}" >> release_notes.md
        echo "go build -o reviewtask ." >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## Verification" >> release_notes.md
        echo "Binary checksums are provided in the \`SHA256SUMS\` file." >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ contains(steps.version.outputs.version, '-') && 'Pre-release' || 'Release' }} ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/SHA256SUMS
          dist/SHA512SUMS
          dist/MANIFEST.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release Issue
      run: |
        # Create GitHub Issue for release documentation
        VERSION="${{ steps.version.outputs.version }}"
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${VERSION}$" | head -n1 || echo "")
        
        echo "Creating release issue for ${VERSION}..."
        if [ -f "scripts/create-release-issue.sh" ]; then
          chmod +x scripts/create-release-issue.sh
          if ./scripts/create-release-issue.sh --version "${VERSION}" --previous-tag "${PREVIOUS_TAG}"; then
            echo "‚úÖ Release issue created successfully"
          else
            echo "‚ö†Ô∏è Failed to create release issue - continuing with release"
          fi
        else
          echo "‚ö†Ô∏è Release issue script not found"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries-${{ steps.version.outputs.version_clean }}
        path: |
          dist/*.tar.gz
          dist/*.zip
          dist/SHA256SUMS
          dist/SHA512SUMS
          dist/MANIFEST.txt
        retention-days: 30

    outputs:
      version: ${{ steps.version.outputs.version }}
      version_clean: ${{ steps.version.outputs.version_clean }}

  verify-release:
    name: Verify Release
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Download release assets
      run: |
        VERSION="${{ needs.release.outputs.version || github.ref_name }}"
        gh release download "$VERSION" --repo "${{ github.repository }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify checksums and integrity
      run: |
        # Verify SHA256 checksums
        if [ -f SHA256SUMS ]; then
          echo "‚úÖ Verifying SHA256 checksums..."
          sha256sum -c SHA256SUMS
        else
          echo "‚ùå SHA256SUMS file not found"
          exit 1
        fi
        
        # Verify SHA512 checksums if available
        if [ -f SHA512SUMS ]; then
          echo "‚úÖ Verifying SHA512 checksums..."
          sha512sum -c SHA512SUMS
        else
          echo "‚ö†Ô∏è  SHA512SUMS file not found (optional)"
        fi
        
        # Verify manifest integrity
        if [ -f MANIFEST.txt ]; then
          echo "‚úÖ Manifest file found"
          echo "üìã Release manifest contents:"
          cat MANIFEST.txt
        else
          echo "‚ö†Ô∏è  MANIFEST.txt file not found"
        fi

    - name: Test binary execution
      run: |
        # Extract and test Linux amd64 binary
        VERSION="${{ needs.release.outputs.version || github.ref_name }}"
        
        if [ -f "reviewtask-${VERSION}-linux-amd64.tar.gz" ]; then
          tar -xzf "reviewtask-${VERSION}-linux-amd64.tar.gz"
          chmod +x reviewtask
          
          # Test version command
          ./reviewtask version
        else
          echo "Linux amd64 binary not found"
          ls -la
          exit 1
        fi