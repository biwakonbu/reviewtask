name: Auto Label PR from Development

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches: [main]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: read
      contents: read
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Check existing labels
      id: check_labels
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Checking for existing release labels on PR #${{ github.event.pull_request.number }}..."
        
        # Check if PR already has a release label
        EXISTING_LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[] | select(.name | startswith("release:")) | .name' | head -1)
        
        if [[ -n "$EXISTING_LABEL" ]]; then
          echo "‚úÖ PR already has label: $EXISTING_LABEL"
          echo "has_label=true" >> $GITHUB_OUTPUT
          echo "existing_label=$EXISTING_LABEL" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No release label found on PR"
          echo "has_label=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Auto-label PR from linked issues
      if: steps.check_labels.outputs.has_label != 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Auto-labeling PR #${{ github.event.pull_request.number }} from Development section..."
        
        # Make script executable
        chmod +x scripts/auto-label-from-development.sh
        
        # Run the auto-labeling script
        if ./scripts/auto-label-from-development.sh ${{ github.event.pull_request.number }}; then
          echo "‚úÖ Auto-labeling completed successfully"
        else
          exit_code=$?
          case $exit_code in
            1)
              echo "‚ö†Ô∏è No release labels found - default applied"
              ;;
            2)
              echo "‚ö†Ô∏è Multiple conflicting release labels found"
              ;;
            3)
              echo "‚ùå Auto-labeling failed due to API or configuration error"
              exit 1
              ;;
            *)
              echo "‚ùå Auto-labeling failed with unknown error (exit code: $exit_code)"
              exit 1
              ;;
          esac
        fi
    
    - name: Comment on PR about auto-labeling
      if: success() && steps.check_labels.outputs.has_label != 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the applied label
        APPLIED_LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[] | select(.name | startswith("release:")) | .name' | head -1)
        
        if [[ -n "$APPLIED_LABEL" ]]; then
          RELEASE_TYPE="${APPLIED_LABEL#release:}"
          
          cat <<-EOF | gh pr comment ${{ github.event.pull_request.number }} --body-file -
          üè∑Ô∏è **Auto-labeling completed**
          
          This PR has been automatically labeled with \`${APPLIED_LABEL}\` based on linked issues in the Development section.
          
          **Release Type**: ${RELEASE_TYPE^} release
          **How it works**:
          1. ‚úÖ Check Development section for linked issues
          2. ‚úÖ Extract release labels from linked issues
          3. ‚úÖ Apply highest priority label to PR (major > minor > patch)
          4. ‚úÖ Default to \`release:minor\` if no labels found
          
          This ensures consistent release labeling and enables automated release processes.
        EOF
        fi