name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-go-
        enableCrossOsArchive: false
    
    - name: Download dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        set -euo pipefail
        timeout_duration=300
        max_retries=3
        retry_count=0
        
        # Determine which timeout command to use
        if command -v gtimeout >/dev/null 2>&1; then
          TIMEOUT_CMD="gtimeout"
        elif command -v timeout >/dev/null 2>&1; then
          TIMEOUT_CMD="timeout"
        else
          TIMEOUT_CMD=""
        fi
        
        while [ $retry_count -lt $max_retries ]; do
          if [ -n "$TIMEOUT_CMD" ]; then
            if $TIMEOUT_CMD $timeout_duration go mod download; then
              echo "Dependencies downloaded successfully"
              break
            fi
          else
            # Fallback: run without timeout on systems where it's not available
            if go mod download; then
              echo "Dependencies downloaded successfully (no timeout available)"
              break
            fi
          fi
          
          retry_count=$((retry_count + 1))
          echo "Download attempt $retry_count failed, retrying..."
          if [ $retry_count -lt $max_retries ]; then
            sleep 10
          fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
          echo "Failed to download dependencies after $max_retries attempts"
          exit 1
        fi
      shell: bash
    
    - name: Download dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        $maxRetries = 3
        $retryCount = 0
        
        while ($retryCount -lt $maxRetries) {
          Write-Host "Download attempt $($retryCount + 1) of $maxRetries"
          
          try {
            $process = Start-Process -FilePath "go" -ArgumentList "mod", "download" -Wait -NoNewWindow -PassThru -RedirectStandardOutput "download_output.txt" -RedirectStandardError "download_error.txt"
            
            if ($process.ExitCode -eq 0) {
              Write-Host "Dependencies downloaded successfully"
              if (Test-Path "download_output.txt") {
                Get-Content "download_output.txt" | Write-Host
                Remove-Item "download_output.txt" -ErrorAction SilentlyContinue
              }
              if (Test-Path "download_error.txt") {
                Remove-Item "download_error.txt" -ErrorAction SilentlyContinue
              }
              exit 0
            } else {
              Write-Host "Download failed with exit code: $($process.ExitCode)"
              if (Test-Path "download_error.txt") {
                Write-Host "Error output:"
                Get-Content "download_error.txt" | Write-Host
                Remove-Item "download_error.txt" -ErrorAction SilentlyContinue
              }
              if (Test-Path "download_output.txt") {
                Remove-Item "download_output.txt" -ErrorAction SilentlyContinue
              }
            }
          }
          catch {
            Write-Host "Exception occurred: $($_.Exception.Message)"
          }
          
          $retryCount++
          if ($retryCount -lt $maxRetries) {
            Write-Host "Retrying in 10 seconds..."
            Start-Sleep -Seconds 10
          }
        }
        
        Write-Host "Failed to download dependencies after $maxRetries attempts"
        exit 1
      shell: powershell
    
    - name: Build binary for tests
      shell: bash
      run: |
        echo "Building binary for integration tests..."
        go build -o reviewtask .
        # Also copy to test directory for tests that look there
        cp reviewtask test/reviewtask
    
    - name: Run tests
      id: test
      shell: bash
      run: |
        # Set up test command based on OS
        # All tests now use mocks for external dependencies
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEST_CMD="go test -v -timeout=10m -coverprofile=coverage-${{ matrix.os }}.out ./..."
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          TEST_CMD="go test -v -race -timeout=10m -coverprofile=coverage-${{ matrix.os }}.out ./..."
        else
          # macOS: Run tests sequentially with coverage to avoid race condition issues
          TEST_CMD="go test -v -p 1 -timeout=15m -coverprofile=coverage-${{ matrix.os }}.out ./..."
        fi
        
        echo "Running: $TEST_CMD"
        
        # Run tests and capture exit code
        set +e
        $TEST_CMD
        TEST_EXIT_CODE=$?
        set -e
        
        # If tests failed, provide detailed debugging information
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "::error::Tests failed with exit code $TEST_EXIT_CODE"
          echo "::group::Failed Test Summary"
          echo "Exit code: $TEST_EXIT_CODE"
          echo "Test command: $TEST_CMD"
          echo "Working directory: $(pwd)"
          echo "Go version: $(go version)"
          echo "Environment variables:"
          env | grep -E "^(GO|CI|GITHUB_)" | sort
          echo "::endgroup::"
          
          # Try to extract specific test failures
          echo "::group::Test Failure Details"
          if [ -f coverage-${{ matrix.os }}.out ]; then
            echo "Coverage file exists, but tests failed"
            # Try to find FAIL lines in recent output
            go test -v ./... 2>&1 | grep -E "^(FAIL|--- FAIL:|Error:|panic:)" || true
          else
            echo "No coverage file generated"
          fi
          echo "::endgroup::"
          
          exit $TEST_EXIT_CODE
        fi
        
        echo "All tests passed successfully!"
    
    - name: Debug test failures
      if: failure() && steps.test.outcome == 'failure'
      shell: bash
      run: |
        echo "::group::Detailed Test Failure Analysis"
        echo "Analyzing test failures for debugging..."
        
        # Run tests again with JSON output for structured analysis
        echo "Re-running failed tests with JSON output..."
        set +e
        go test -json ./... 2>&1 | tee test-output.json | jq -r 'select(.Action == "fail" or .Test != null and .Output != null) | "\(.Time // "") \(.Action // "") \(.Package // "") \(.Test // "") \(.Output // "")"' || true
        set -e
        
        # Look for specific error patterns
        echo "::endgroup::"
        
        echo "::group::Common Error Patterns"
        if [ -f test-output.json ]; then
          echo "Race conditions:"
          grep -i "race" test-output.json || echo "No race conditions detected"
          
          echo -e "\nPanics:"
          grep -i "panic" test-output.json || echo "No panics detected"
          
          echo -e "\nTimeout errors:"
          grep -i "timeout" test-output.json || echo "No timeout errors detected"
          
          echo -e "\nPermission errors:"
          grep -i "permission" test-output.json || echo "No permission errors detected"
        fi
        echo "::endgroup::"

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-logs-${{ matrix.os }}-${{ matrix.go-version }}
        path: |
          test-output.json
          coverage-*.out
        retention-days: 7

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage-${{ matrix.os }}.out
        flags: unittests
        name: codecov-umbrella

  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: golangci-lint
  #     uses: golangci/golangci-lint-action@v3
  #     with:
  #       version: latest
  #       args: --timeout=5m

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Check formatting
      run: |
        echo "Checking code formatting..."
        UNFORMATTED_FILES=$(gofmt -s -l .)
        if [ -n "$UNFORMATTED_FILES" ]; then
          echo "::error::Code formatting issues detected"
          echo "::group::Files requiring formatting"
          echo "The following files are not formatted correctly:"
          echo "$UNFORMATTED_FILES"
          echo "::endgroup::"
          
          echo "::group::Formatting differences"
          for file in $UNFORMATTED_FILES; do
            echo "=== $file ==="
            gofmt -s -d "$file"
          done
          echo "::endgroup::"
          
          echo "To fix formatting issues, run: gofmt -s -w ."
          exit 1
        fi
        echo "All files are properly formatted!"

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run go vet
      run: |
        echo "Running go vet..."
        set +e
        go vet ./... 2>&1 | tee vet.log
        VET_EXIT_CODE=$?
        set -e
        
        if [ $VET_EXIT_CODE -ne 0 ]; then
          echo "::error::go vet found issues"
          echo "::group::Go Vet Issues"
          cat vet.log
          echo "::endgroup::"
          
          echo "::group::Common go vet issues"
          echo "1. Printf format errors: Check format strings match arguments"
          echo "2. Unreachable code: Remove code after return/panic statements"
          echo "3. Struct tag issues: Ensure struct tags are properly formatted"
          echo "4. Copy lock issues: Don't copy types containing sync.Mutex"
          echo "::endgroup::"
          exit $VET_EXIT_CODE
        fi
        echo "go vet passed successfully!"

  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.22'
  #   
  #   - name: Install and run Gosec
  #     run: |
  #       go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  #       gosec ./...

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Build binary
      id: build
      shell: bash
      run: |
        echo "Building binary..."
        set +e
        go build -v . 2>&1 | tee build.log
        BUILD_EXIT_CODE=$?
        set -e
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "::error::Build failed with exit code $BUILD_EXIT_CODE"
          echo "::group::Build Error Details"
          echo "Exit code: $BUILD_EXIT_CODE"
          echo "Working directory: $(pwd)"
          echo "Go version: $(go version)"
          echo "Build output:"
          cat build.log
          echo "::endgroup::"
          exit $BUILD_EXIT_CODE
        fi
        
        echo "Build completed successfully!"
    
    - name: Test binary execution
      shell: bash
      run: |
        echo "Testing binary execution..."
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./reviewtask.exe --help || {
            echo "::error::Failed to execute binary on Windows"
            echo "Binary info:"
            ls -la reviewtask.exe || true
            file reviewtask.exe || true
            exit 1
          }
        else
          ./reviewtask --help || {
            echo "::error::Failed to execute binary on ${{ matrix.os }}"
            echo "Binary info:"
            ls -la reviewtask || true
            file reviewtask || true
            exit 1
          }
        fi
        echo "Binary execution test passed!"