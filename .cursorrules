# ReviewTask Integration Rules for Cursor IDE

## About ReviewTask
This project uses reviewtask for managing GitHub PR review feedback. All review tasks are stored in the .pr-review/ directory and tracked systematically.

## Available Commands
- reviewtask status              # Show overview of all tasks
- reviewtask show                # Display current/next task details
- reviewtask show <task-id>      # Show specific task details
- reviewtask update <id> <status> # Update task status (todo/doing/done/pending)
- reviewtask fetch review <PR>   # Fetch reviews for a PR
- reviewtask                     # Generate tasks from fetched reviews

## Workflow Guidelines
When working on PR review tasks:
1. Always check task status before starting work: reviewtask status
2. Update task to "doing" when starting: reviewtask update <id> doing
3. Mark as "done" when completed: reviewtask update <id> done
4. Use "pending" for blocked tasks: reviewtask update <id> pending

## Task Priority Levels
- critical: Security issues, data exposure, authentication problems
- high: Performance issues, memory leaks, critical bugs
- medium: Functional bugs, logic improvements, error handling
- low: Code style, naming conventions, documentation

## Configuration
- Config file: .pr-review/config.json
- AI provider: auto (tries Cursor CLI first, then Claude)
- Model: auto (Cursor selects best model automatically)

## Best Practices
- Run reviewtask immediately after receiving PR reviews
- Keep task statuses updated in real-time
- Use reviewtask show to get full context for current task
- Never manually edit .pr-review/ files
- Re-run reviewtask when new review comments are added

## AI Assistance Context
When helping with reviewtask operations:
- Tasks have unique UUIDs for identification
- Each task links to its source GitHub comment
- Task descriptions are in the configured user language
- The tool preserves work progress when re-analyzing reviews
